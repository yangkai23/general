package linkedlist;

import java.util.Comparator;
import java.util.Iterator;
import java.util.Optional;
import java.util.Spliterator;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.IntFunction;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.stream.BaseStream;
import java.util.stream.Collector;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.Stream;

public class SinglyLinkedList  implements Stream<linkedlist.SinglyLinkedList.Node>{
	private Node head;
	private int size;

	public SinglyLinkedList() {
		this.head = null;
		this.size = 0;
	}

	class Node {
		public int data;
		public Node next;

		public Node(int data) {
			this.data = data;
			this.next = null;
		}
	}

	public void addFirst(int data) {
		Node node = new Node(data);
		node.next = this.head;
		head = node;
		size++;
	}

	public void add(int data) {
		Node node = new Node(data);
		Node temp = this.head;
		if (this.head == null) {
			head = node;
			size++;
			return;
		}
		while (temp.next != null)
			temp = temp.next;
		temp.next = node;
		size++;

	}

	public void add(int position, int data) {
		if (position > size) {
			System.err.println("Index is out of bound");
			return;
		}
		if (position == 0) {
			addFirst(data);
			return;
		}
		Node node = new Node(data);
		Node temp = this.head;
		int pointer = 0;
		while (pointer < position - 1 && temp != null) {
			pointer++;
			temp = temp.next;
			System.out.println("check");
		}
		node.next = temp.next;
		temp.next = node;
		size++;
	}

	public int get(int position) {
		if (position >= size) {
			System.err.println("Index out of bound");
			return -1;
		}
		if (position == 0)
			return this.head.data;
		Node temp = this.head;
		while (position > 0 && temp != null) {
			position--;
			temp = temp.next;
		}
		return temp.data;

	}

	public int removeFirst() {
		Node temp = this.head;
		this.head = temp.next;
		temp.next = null;
		return temp.data;
	}

	public void printList() {
		Node temp = this.head;
		System.out.print("Head -> ");
		while (temp != null) {
			System.out.print(temp.data + " -> ");
			temp = temp.next;
		}
		System.out.println("null");
	}

	public int size() {
		return size;
	}

	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public Iterator iterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Spliterator spliterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isParallel() {
		// TODO Auto-generated method stub
		return false;
	}


	@Override
	public void close() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Stream filter(Predicate predicate) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream map(Function mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream mapToInt(ToIntFunction mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LongStream mapToLong(ToLongFunction mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DoubleStream mapToDouble(ToDoubleFunction mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream flatMap(Function mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream flatMapToInt(Function mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LongStream flatMapToLong(Function mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DoubleStream flatMapToDouble(Function mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream distinct() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream sorted() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream sorted(Comparator comparator) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream peek(Consumer action) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream limit(long maxSize) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream skip(long n) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void forEach(Consumer action) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void forEachOrdered(Consumer action) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Object[] toArray() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object[] toArray(IntFunction generator) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object reduce(Object identity, BinaryOperator accumulator) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional reduce(BinaryOperator accumulator) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object reduce(Object identity, BiFunction accumulator, BinaryOperator combiner) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object collect(Supplier supplier, BiConsumer accumulator, BiConsumer combiner) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object collect(Collector collector) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional min(Comparator comparator) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional max(Comparator comparator) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long count() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean anyMatch(Predicate predicate) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean allMatch(Predicate predicate) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean noneMatch(Predicate predicate) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Optional findFirst() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional findAny() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream<Node> sequential() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream<Node> parallel() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream<Node> unordered() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream<Node> onClose(Runnable closeHandler) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Node reduce(Node identity, BinaryOperator<Node> accumulator) {
		// TODO Auto-generated method stub
		return null;
	}
}
