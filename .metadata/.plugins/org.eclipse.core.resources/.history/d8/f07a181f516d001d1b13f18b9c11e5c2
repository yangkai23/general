package linkedlist;

public class SinglyLinkedList {
	private Node head;
	private int size;

	public SinglyLinkedList() {
		this.head = null;
		this.size = 0;
	}

	private class Node {
		public int data;
		public Node next;

		public Node(int data) {
			this.data = data;
			this.next = null;
		}
	}

	public void addFirst(int data) {
		Node node = new Node(data);
		node.next = this.head;
		head = node;
		size++;
	}

	public void add(int data) {
		Node node = new Node(data);
		Node temp = this.head;
		if (this.head == null) {
			head = node;
			size++;
			return;
		}
		while (temp.next != null)
			temp = temp.next;
		temp.next = node;
		size++;

	}

	public void add(int position, int data) {
		if (position >= size) {
			System.err.println("Index is out of bound");
			return;
		}
		Node node = new Node(data);
		Node temp = this.head;
		int pointer = 0;
		while (pointer < position && temp != null) {
			pointer++;
			temp = temp.next;
			System.out.println("check");
		}
		System.out.println(temp.data);
		node.next = temp.next;
		temp.next = node;
		size++;
	}

	public int removeFirst() {
		Node temp = this.head;
		this.head = temp.next;
		temp.next = null;
		return temp.data;
	}

	public void printList() {
		Node temp = this.head;
		System.out.print("Head -> ");
		while (temp != null) {
			System.out.print(temp.data + " -> ");
			temp = temp.next;
		}
		System.out.println("null");
	}

	public int size() {
		return size;
	}

	public boolean isEmpty() {
		return size == 0;
	}
}
