package linkedlist;

import java.util.IntSummaryStatistics;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.PrimitiveIterator.OfInt;
import java.util.function.BiConsumer;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.IntFunction;
import java.util.function.IntPredicate;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.ObjIntConsumer;
import java.util.function.Supplier;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.Stream;

public class SinglyLinkedList implements IntStream {
	private Node head;
	private int size;

	public SinglyLinkedList() {
		this.head = null;
		this.size = 0;
	}

	private class Node {
		public int data;
		public Node next;

		public Node(int data) {
			this.data = data;
			this.next = null;
		}
	}

	public void addFirst(int data) {
		Node node = new Node(data);
		node.next = this.head;
		head = node;
		size++;
	}

	public void add(int data) {
		Node node = new Node(data);
		Node temp = this.head;
		if (this.head == null) {
			head = node;
			size++;
			return;
		}
		while (temp.next != null)
			temp = temp.next;
		temp.next = node;
		size++;

	}

	public void add(int position, int data) {
		if (position > size) {
			System.err.println("Index is out of bound");
			return;
		}
		if (position == 0) {
			addFirst(data);
			return;
		}
		Node node = new Node(data);
		Node temp = this.head;
		int pointer = 0;
		while (pointer < position - 1 && temp != null) {
			pointer++;
			temp = temp.next;
			System.out.println("check");
		}
		node.next = temp.next;
		temp.next = node;
		size++;
	}

	public int get(int position) {
		if (position >= size) {
			System.err.println("Index out of bound");
			return -1;
		}
		if (position == 0)
			return this.head.data;
		Node temp = this.head;
		while (position > 0 && temp != null) {
			position--;
			temp = temp.next;
		}
		return temp.data;

	}

	public int removeFirst() {
		Node temp = this.head;
		this.head = temp.next;
		temp.next = null;
		return temp.data;
	}

	public void printList() {
		Node temp = this.head;
		System.out.print("Head -> ");
		while (temp != null) {
			System.out.print(temp.data + " -> ");
			temp = temp.next;
		}
		System.out.println("null");
	}

	public int size() {
		return size;
	}

	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public boolean isParallel() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public IntStream unordered() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream onClose(Runnable closeHandler) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void close() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public IntStream filter(IntPredicate predicate) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream map(IntUnaryOperator mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <U> Stream<U> mapToObj(IntFunction<? extends U> mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LongStream mapToLong(IntToLongFunction mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DoubleStream mapToDouble(IntToDoubleFunction mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream flatMap(IntFunction<? extends IntStream> mapper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream distinct() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream sorted() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream peek(IntConsumer action) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream limit(long maxSize) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream skip(long n) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void forEach(IntConsumer action) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void forEachOrdered(IntConsumer action) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public int[] toArray() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int reduce(int identity, IntBinaryOperator op) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public OptionalInt reduce(IntBinaryOperator op) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <R> R collect(Supplier<R> supplier, ObjIntConsumer<R> accumulator, BiConsumer<R, R> combiner) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int sum() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public OptionalInt min() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public OptionalInt max() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long count() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public OptionalDouble average() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntSummaryStatistics summaryStatistics() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean anyMatch(IntPredicate predicate) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean allMatch(IntPredicate predicate) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean noneMatch(IntPredicate predicate) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public OptionalInt findFirst() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public OptionalInt findAny() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LongStream asLongStream() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DoubleStream asDoubleStream() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Stream<Integer> boxed() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream sequential() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IntStream parallel() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public OfInt iterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public java.util.Spliterator.OfInt spliterator() {
		// TODO Auto-generated method stub
		return null;
	}
}
